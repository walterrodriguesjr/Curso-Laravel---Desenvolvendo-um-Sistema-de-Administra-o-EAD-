01-INTRO ADMIN EAD
-explicação sobre o curso

1A-conhecendo os arquivos do dashboard
-explicação sobre o template, usado tailwind css e inertia.Js
-instalado o template do projeto direto do git
    git clone https://github.com/especializati/setup-docker-laravel.git
-remover o versionamento do git
    rm -rf .git/
-configurar o .env
    cp .env.example .env
-subir os containers docker
    docker-compose up -d
-acessa a aplicação de container docker
    docker-compose exec app bash
-instala o composer
    composer install
-gera a key generation do php
    php artisan key:generate
-conectado com o banco de dados

2A-instalando o laravel 9
  OK

3A-versionar projeto laravel e armazenar no github
-criado o repositorio do projeto no github
    https://github.com/walterrodriguesjr/Curso-Laravel---Desenvolvendo-um-Sistema-de-Administra-o-EAD-
-feito o primeiro commit do projeto

4A-extensões VsCode para laravel
-instalada as extensções recomendadas


02-CRIANDO TEMPLATE

1B-criando o template personalizado para o laravel
-download do template
    Deixe o seu star: https://github.com/especializati/curso-laravel-9-dashboard-ead/tree/template
    download manual, sem git, após, arrastado os arquivos para seus locais
-criado as pastas de home, layouts e _partials, HTML separado usando esquema de @include e @yield

2B-estratégia de menus no laravel
-criada a route com prefix 'admin', sendo um group, de get para AdminController
-acessar o container PHP: docker-compose exec app bash
-dentro do container, criado o controller 'AdminController'
    php artisan make:controller Admin\\AdminController
-em config, foi criado o arquivo template.php, lá foram criados arrays que podem gerar dinamicamente
    novos campos para o menu sidebar


03-MODELAGEM DE TABELAS

1C-modelagem da tabela de Admins no laravel
-criado a migration e a model de Admin
    php artisan make:model Admin -m
-configurado as model e migrations de User e Admin
-rodada as migration
    php artisan migrate

2C-modelagem das tabelas módulos e aulas no laravel
-criado a migration e a model de Course
    php artisan make:model Course -m
-configurado as model e migrations de Course

3C-modelagem das tabelas módulos e aulas no laravel
-criado a migration e a model de Module
    php artisan make:model Module -m
-criado a migration e a model de Lesson
    php artisan make:model Lesson -m
-configurado as model e migrations de Module e Lesson
-feitos os relacionamentos entre Course, Module e Lesson
-rodada as migrations
    php artisan migrate

4C-modelagem de tabelas de suportes no laravel
-criado a migration e a model de Support
    php artisan make:model Support -m
-criado a migration e a model de ReplySupport
    php artisan make:model ReplySupport -m
-configurado as model e migrations de Support e ReplySupport
-feitos os relacionamentos entre Support, ReplySupport e User e Lesson
-rodada as migration fresh pois ouve alterações nas tabelas anteriormente criadas
    php artisan migrate:fresh

5C-modelagem da tabela de views no laravel
-criado a migration e a model de View
    php artisan make:model View -m
-configurado as model e migrations de Support e View
-rodado php artisan migrate:fresh , para rodar novamente todas as migration


04-GESTÃO DE USUÁRIOS

1D-service layer e repositories realmente fazem sentido no laravel?
-a idéia é deixar os 'Models' enxuto.

2D-princípio da inversão da dependência no laravel
-a primeira Feature do projeto será 'gestão de usuários'
-criado as pastas Repositories e Services

3D-implementar repositórios no laravel
-configurado a function() de controller em UserRepository.php

4D-implementar o service layer de usuário no laravel
-configurado a function() de controller em UserService.php
-criado a pasta Admin e dentro o controller UserController.php
    php artisan make:controller Admin\\UserController
-criada a Route users, de get para UserController

-ERRO, AGUARDANDO AJUDA






