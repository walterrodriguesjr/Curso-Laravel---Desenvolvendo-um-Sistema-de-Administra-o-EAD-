01-INTRO ADMIN EAD
-explicação sobre o curso

1A-conhecendo os arquivos do dashboard
-explicação sobre o template, usado tailwind css e inertia.Js
-instalado o template do projeto direto do git
    git clone https://github.com/especializati/setup-docker-laravel.git
-remover o versionamento do git
    rm -rf .git/
-configurar o .env
    cp .env.example .env
-subir os containers docker
    docker-compose up -d
-acessa a aplicação de container docker
    docker-compose exec app bash
-instala o composer
    composer install
-gera a key generation do php
    php artisan key:generate
-conectado com o banco de dados

2A-instalando o laravel 9
  OK

3A-versionar projeto laravel e armazenar no github
-criado o repositorio do projeto no github
    https://github.com/walterrodriguesjr/Curso-Laravel---Desenvolvendo-um-Sistema-de-Administra-o-EAD-
-feito o primeiro commit do projeto

4A-extensões VsCode para laravel
-instalada as extensções recomendadas


02-CRIANDO TEMPLATE

1B-criando o template personalizado para o laravel
-download do template
    Deixe o seu star: https://github.com/especializati/curso-laravel-9-dashboard-ead/tree/template
    download manual, sem git, após, arrastado os arquivos para seus locais
-criado as pastas de home, layouts e _partials, HTML separado usando esquema de @include e @yield

2B-estratégia de menus no laravel
-criada a route com prefix 'admin', sendo um group, de get para AdminController
-acessar o container PHP: docker-compose exec app bash
-dentro do container, criado o controller 'AdminController'
    php artisan make:controller Admin\\AdminController
-em config, foi criado o arquivo template.php, lá foram criados arrays que podem gerar dinamicamente
    novos campos para o menu sidebar


03-MODELAGEM DE TABELAS

1C-modelagem da tabela de Admins no laravel
-criado a migration e a model de Admin
    php artisan make:model Admin -m
-configurado as model e migrations de User e Admin
-rodada as migration
    php artisan migrate

2C-modelagem das tabelas módulos e aulas no laravel
-criado a migration e a model de Course
    php artisan make:model Course -m
-configurado as model e migrations de Course

3C-modelagem das tabelas módulos e aulas no laravel
-criado a migration e a model de Module
    php artisan make:model Module -m
-criado a migration e a model de Lesson
    php artisan make:model Lesson -m
-configurado as model e migrations de Module e Lesson
-feitos os relacionamentos entre Course, Module e Lesson
-rodada as migrations
    php artisan migrate

4C-modelagem de tabelas de suportes no laravel
-criado a migration e a model de Support
    php artisan make:model Support -m
-criado a migration e a model de ReplySupport
    php artisan make:model ReplySupport -m
-configurado as model e migrations de Support e ReplySupport
-feitos os relacionamentos entre Support, ReplySupport e User e Lesson
-rodada as migration fresh pois ouve alterações nas tabelas anteriormente criadas
    php artisan migrate:fresh

5C-modelagem da tabela de views no laravel
-criado a migration e a model de View
    php artisan make:model View -m
-configurado as model e migrations de Support e View
-rodado php artisan migrate:fresh , para rodar novamente todas as migration


04-GESTÃO DE USUÁRIOS

1D-service layer e repositories realmente fazem sentido no laravel?
-a idéia é deixar os 'Models' enxuto.

2D-princípio da inversão da dependência no laravel
-a primeira Feature do projeto será 'gestão de usuários'
-criado as pastas Repositories e Services

3D-implementar repositórios no laravel
-configurado a function() de controller em UserRepository.php

4D-implementar o service layer de usuário no laravel
-configurado a function() de controller em UserService.php
-criado a pasta Admin e dentro o controller UserController.php
    php artisan make:controller Admin\\UserController
-criada a Route users, de get para UserController

5D-listar usuários no laravel
-em admin, foi criada a pasta users e o arquivo index.blade.php
-feito adaptações para retornar o usuario na nova view index

6D-converter array do repositório para objeto PHP/laravel
-feito configuração em UserService.php para exibir dados do usuario em /users

7D-criar helpers no laravel
-criado em app, a pasta Helpers, e o arquivo functions.php, onde ficará a funções
-configurado a função que ficará global, covertItemsOfArrayToObject()
-incluido a extensão em composer.json
    composer dump-autoload

8D-laravel Acessors
-a função que converte a data de criação, foi feita em User.php

9D-preparar formulários de registro no laravel
-configurando a index de usuários, feito inserção de HTML
-criada a Route users/create, de get para UserController
-inserido o route('users.create') no a href de index
-em UserController, criado a function() create, que retorna a view create
-criada e configurada a view create, HTML de formulário de cadastro de usuário
-criada a pasta _partials dentro da pasta users, criado o arquivo form.blade.php
-criada a Route users/create, de post para UserController
-em UserController, criado a function() store

10D-validar e registrar usuário no laravel
-criado e configurado as validações de StoreUser.php
    php artisan make:request StoreUser

11D-preparar a edição de usuários no laravel
-criada a Route users/create/{id}/edit, de get para UserController

12D-atualizar usuário no laravel
-criada lógica para update de dados de usuário

14D-preparar para trabalhar com upload de arquivos no laravel
-em 'Services' foi criado o arquivo 'UplodFile.php' para criação do serviço de upload de imagem
-em UserController foi criado o método uploadFile()
-em UserController foi criado o método changeImage()
-criada a Route /users/{id}, de get para UserController, show
-criada a Route users/create/{id}, de delete para UserController, destroy
-criada a Route /users/{id}/image, de get para UserController, changeImage
-criada a Route /users/{id}/update-image, de put para UserController, users.update.image
-em resources/views/admin/users/, foi criado a view change-image.blade.php, usando como base o HTML de edit.blade.php

15D-upload de arquivos no laravel
-configurado a env para imagens irem para a pasta public
-rodado php artisan storage:link
-congigurada a index.php de admin, para exibir as imagens cadastradas de usuário

16D-criar filtros de usuários no laravel
-criado o form-search.blade.php dentro de _partials
-form-search feito @include dentro de index.blade.php

17D-validação de uploads no laravel
-tipo de arquivo a ser feito upload (pdf, jpeg etc)
-tamanho do arquivo
-php artisan make:request StoreImage
-configurado StoreImage


05-GESTÃO DE ADMINISTRADORES

18E-criando os administradores do sistema no laravel
-adicionado o icon de administrador em template.php
-para admins, em web.php, foi usado a meneira de 'resource' para incluir as rotas e métodos de AdminController
-rotas de image foram reaproveitadas e adaptadas
-php artisan make:controller Admin\\AdminController --resource
-criado StoreAdmin.php
-criado UpdateAdmin.php
-criado AdminService.php
-configurado AdminController.php
-criado a class AdminRepositoryInterface.php (nos padrões de UserRepositoryInterface)
-em AppServiceProvider.php, incluído AdminRepositoryInterface
-criado e configurado AdminRepository.php
-criado a pasta 'admins' dentro de views/admin, e dentro, suas respectivas views(usando ctrl+c ctrl+v das de users)
-criado e configurado AdminObserver.php
-inserido Admin::observe(AdminObserver::class); em EventServiceProvider.php


06-GESTÃO DE CURSOS

19F-listagem dos cursos no laravel
-adicionado o icon de cursos em template.php
-para courses, em web.php, foi usado a meneira de 'resource' para incluir as rotas e métodos de CoursesController
-php artisan make:controller Admin\\CourseController
-configurado CourseController
-criado e configurado CourseService.php
-criado e configurado CourseRepositoryInterface
-configurada a view  index de Courses

20F-formulário de cadastro de curso no laravel
-em CourseController, criado o método create() para retornar a view do formulário de criação de curso
-em admins/courses, foi criada a view create.blade.php
-em admins/courses/partials, foi criado a view form.blade.php, para o cadastro de cursos

21F-cadastro de curso no laravel(com upload de imagem)
-em CourseController foi criado o método store() para imagem
-criado um observer
    php artisan make:observer CourseObserver

22F-validar cadastro de curso no laravel
-criado uma class de validação
    php artisan make:request StoreCourse

23F-Editar curso no laravel
-criado a view de courses, edit.blade.php
    usado o modelo da edit de users, porem algumas alterações
-em CourseService.php, foi criado a function findById()
-em CourseController, feito a function edit($id)
-em CourseController, feito a function update()

24F-validar cadastro de curso no laravel(unique)
-ok

25F-deletar um curso no laravel
-criada a function show(), em CourseController
-criada a view show.blade.php, de courses
    feito as devidas alterações
-criada a function destroy() em CourseController


07-MÓDULOS DO CURSO

26G-definindo estratégias de módulos no laravel
-em web.php, criado a Route de 'Modules' via 'resource'
-criado ModuleController dentro de Admin
    php artisan make:controller Admin\\ModuleController
-criado ModuleRepositoryInterface.php
-dentro da pastas Eloquent, criado o arquivo ModuleRepository.php

27G-preparar a listagem dos módulos do curso no laravel
-ok

28G-instalar e usar o laravel Debugbar
composer require barryvdh/laravel-debugbar --dev
php artisan vendor:publish --provider="Barryvdh\Debugbar\ServiceProvider"

29G-listando os módulos do curso no laravel
-dentro da pasta admin, criada a pasta module, e dentro, o arquivo index.blade.php

30G-cadastrar novo módulo para o curso laravel
-em ModuleController, criado a function create()
-criado a view create-modules.blade.php
-na pasta modules, criado a pasta partials, e a view form.blade.php

31G-editar módulo do curso no laravel
-criado método edit em ModuleController
-criada a view edit-modules.blade.php
-criado o método update

32G-validar cadastro e edição de módulo no laravel
-php artisan make:request StoreUpdateModule

33G-deletar módulos do curso no laravel
-criado método show em ModuleController
-criada a view show-modules.blade.php
-criado método destroy em ModuleController

34G-filtrar módulos do curso no laravel
-configurado o filter


08-AULAS DOS MÓDULOS

35H-CRUD de aulas do módulo
-para lesson, em web.php, foi usado a meneira de 'resource' para incluir as rotas e métodos de LessonController
-criado o controller LessonController dentro da pastas Admin, usando o resource
    php artisan make:controller Admin\\LessonController --resource
-configurado LessonController
-criado e configurado de acordo, LessonRepositoryInterface.php
-criado e configurado de acordo, LessonRepository.php
-inserido em AppServiceProvider.php, o: LessonRepositoryInterface::class, LessonRepository::class
-a pasta resources/views/admin/courses/modules, foi duplicada, renomeada como lessons e arrastada para
    dentro da pasta modules
-as views da pasta lesson, em seus nomes, onde haviam modules, foi mudado para lessons
-a view form de /modules/lessons/partials, foi adaptada para lesson
-a view create de /modules/lessons/partials, foi adaptada para lesson
-a view edit de /modules/lessons/partials, foi adaptada para lesson
-a view index de /modules/lessons/partials, foi adaptada para lesson
-a view show de /modules/lessons/partials, foi adaptada para lesson
-em LessonController.php, configurado a function create
-em LessonController.php, configurado a function store
-criada em Request, a class StoreUpdateLesson, e configurada
    php artisan make:request StoreUpdateLesson
-em observer, criada a class LessonObserver
    php artisan make:observer LessonObserver
-em LessonController.php, configurado a function show
-em LessonController.php, configurado a function edit
-em LessonController.php, configurado a function update
-em LessonController.php, configurado a function destroy


09-SUPORTE

36I-organizando Service Layer e Repositories no Laravel
-criado a Route index de SupportController
-criado dentro Admin, o controller SupportController
    php artisan make:controller Admin\\SupportController
-em SupportController, criado a function __contruct
-em SupportController, criado a function index
-em Service, foi criado SupportService.php
-em Eloquent, criado SupportRepository.php
-em Providers, AppServiceProvider, incluído LessonRepositoryInterface
-
-



















